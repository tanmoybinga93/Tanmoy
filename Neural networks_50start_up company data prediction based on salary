library(neuralnet)
library(nnet)
library(plyr)
library(dplyr)
library(caret)
library(ggplot2)
install.packages("NeuralNetTools")
library(NeuralNetTools)

## Importing data

start_up<- read.csv(file.choose())

View(start_up)

summary(start_up)

str(start_up)

head(start_up)

tail(start_up) 

attach(start_up)

plot(start_up)

#### pre processing and visualization of the data #### 

start_up$State<- as.numeric(revalue(start_up$State,
                         c("New York"="0","California"="1",
                           "Florida"="2")))

str(start_up_state)

View(start_up)

str(start_up)

plot(R.D.Spend,Profit)

plot(Administration,Profit)

plot(Marketing.Spend,Profit)                            

plot(start_up_state,Profit)

cor(start_up) ##### R.D.Spend has more co-relation value with profit,then Marketing.Spend,Admnistration and state 

normalize<- function(x){
  return((x-(min(x))/max(x)-min(x)))
}

normalize_start_up<- as.data.frame(lapply(start_up,FUN = normalize))

summary(start_up$Profit)

summary(normalize_start_up$Profit)  

#### Data partition into train and test #### 

set.seed(123)

ind<- sample(2,nrow(normalize_start_up),replace = TRUE,prob = c(0.7,0.3))      

train<- normalize_start_up[ind==1,]  

test<- normalize_start_up[ind==2,]

#### creating neural networks model#### 

formula_nn<- paste("Profit",paste(colnames(start_up[-5]),collapse = "t"),sep = '~')

start_up_model<- neuralnet(Profit~R.D.Spend + Administration + Marketing.Spend + State ,linear.output = F,data = train)

start_up_model1<- neuralnet(formula = formula_nn,data = train)

str(start_up_model)

plot(start_up_model,rep = 'best')

par(mar = numeric(4),family = 'serif')

plotnet(start_up_model,alpha = 0.6)

### Evaluating model performance #### 

set.seed(12323)

model_results <- neuralnet::compute(start_up_model,test[1:4])

predicted_profit<- model_results$net.result

predicted_profit

#### predicted profit vs actual profit in test data #### 

cor(predicted_profit,test$Profit)

# since the prediction is in Normalized form, we need to de-normalize it 
# to get the actual prediction on profit 

str_max<- max(start_up$Profit)

str_min<- min(start_up$Profit)

denormalize<- function(x,max,min){
  return((max-min)*x+min)
  
}
ActualProfit_pred <- denormalize(predicted_profit,str_min,str_max)

head(actual_profit_pred)

##       [,1]
2      14681.4
4      14681.4
5      14681.4
8      14681.4
11     14681.4
16     14681.4

#### improve trhe model performance #### 

set.seed(12345) 

start_up_model2<- neuralnet(Profit~ R.D.Spend + Administration + Marketing.Spend + State,data = train,linear.output = F,hidden = 2)

plot(start_up_model2,rep = "best")

summary(start_up_model2) 

model_results2 <- neuralnet::compute(start_up_model2,test[1:4])

predicted_profit1<- model_results2$net.result

predicted_profit1

cor(predicted_profit1,test$Profit)

##           [,1]
      [1,] 0.6412775

plot(predicted_profit1,test$Profit)

par(mar = numeric(4), family = 'serif')

plotnet(start_up_model2, alpha = 0.6)
############################################ more corelation percentage than previous model #########################################
